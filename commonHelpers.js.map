{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["//~==== Вариант МОЙ №1 ===============================================\n// import flatpickr from \"flatpickr\";\n// import \"flatpickr/dist/flatpickr.min.css\";\n// import iziToast from \"izitoast\";\n// import \"izitoast/dist/css/iziToast.min.css\";\n\n// // Оголошуємо змінну для зберігання обраної дати\n// let userSelectedDate;\n\n// // Оголошуємо змінну для зберігання ідентифікатора таймера\n// let timerId;\n\n// // Оголошуємо змінну для зберігання елемента таймера\n// const timerElement = document.getElementById(\"timer\");\n\n// // Оголошуємо змінну для зберігання елемента кнопки\n// const startButton = document.getElementById(\"start-button\");\n\n// // Оголошуємо об'єкт параметрів для flatpickr\n// const options = {\n//     enableTime: true,\n//     time_24hr: true,\n//     defaultDate: new Date(),\n//     minuteIncrement: 1,\n//     onClose(selectedDates) {\n//         // Отримуємо перший елемент масиву обраних дат\n//         const selectedDate = selectedDates[0];\n\n//         // Перевіряємо, чи обрана дата в майбутньому\n//         if (selectedDate > new Date()) {\n//             // Записуємо обрану дату в змінну\n//             userSelectedDate = selectedDate;\n\n//             // Робимо кнопку активною\n//             startButton.disabled = false;\n//         } else {\n//             // Показуємо повідомлення про помилку\n//             iziToast.error({\n//                 title: \"Error\",\n//                 message: \"Please choose a date in the future\",\n//             });\n\n//             // Робимо кнопку неактивною\n//             startButton.disabled = true;\n//         }\n//     },\n// };\n\n// // Ініціалізуємо flatpickr на елементі input\n// flatpickr(\"#datetime-picker\", options);\n\n// // Написуємо функцію, яка додає нуль перед значенням, якщо воно менше 10\n// function addLeadingZero(value) {\n//     return value.toString().padStart(2, \"0\");\n// }\n\n// // Написуємо функцію, яка оновлює інтерфейс таймера\n// function updateTimer() {\n//     // Обчислюємо різницю між обраною і поточною датою в мілісекундах\n//     const difference = userSelectedDate - new Date();\n\n//     // Перевіряємо, чи різниця більша за нуль\n//     if (difference > 0) {\n//         // Конвертуємо різницю в дні, години, хвилини і секунди\n//         const { days, hours, minutes, seconds } = convertMs(difference);\n\n//         // Форматуємо значення з нулями\n//         const formattedDays = addLeadingZero(days);\n//         const formattedHours = addLeadingZero(hours);\n//         const formattedMinutes = addLeadingZero(minutes);\n//         const formattedSeconds = addLeadingZero(seconds);\n\n//         // Виводимо значення на екран\n//         timerElement.textContent = `${formattedDays}:${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n//     } else {\n//         // Зупиняємо таймер\n//         clearInterval(timerId);\n\n//         // Виводимо нулі на екран\n//         timerElement.textContent = \"00:00:00:00\";\n//     }\n// }\n\n// // Написуємо функцію, яка запускає таймер\n// function startTimer() {\n//     // Перевіряємо, чи обрана дата в майбутньому\n//     if (userSelectedDate > new Date()) {\n//         // Оновлюємо таймер один раз\n//         updateTimer();\n\n//         // Запускаємо таймер з інтервалом в одну секунду\n//         timerId = setInterval(updateTimer, 1000);\n\n//         // Робимо кнопку і інпут неактивними\n//         startButton.disabled = true;\n//         document.getElementById(\"datetime-picker\").disabled = true;\n//     } else {\n//         // Показуємо повідомлення про помилку\n//         iziToast.error({\n//             title: \"Error\",\n//             message: \"Please choose a date in the future\",\n//         });\n//     }\n// }\n\n// // Додаємо обробник події на кнопку\n// startButton.addEventListener(\"click\", startTimer);\n\n//~==== Вариант МОЙ №2 ===============================================\n\nimport flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// Оголошуємо змінну для зберігання обраної дати\nlet userSelectedDate;\n\n// Оголошуємо змінну для зберігання ідентифікатора таймера\nlet timerId;\n\n// Оголошуємо змінну для зберігання елемента таймера\nconst timerElement = document.querySelector(\".timer\");\n\n// Оголошуємо змінну для зберігання елемента кнопки\nconst startButton = document.querySelector('[data-start]');\n// Робимо кнопку неактивною при першому завантаженні сторінки\nstartButton.disabled = true;\n\n// Оголошуємо об'єкт параметрів для flatpickr\nconst options = {\n    enableTime: true,\n    time_24hr: true,\n    defaultDate: new Date(),\n    minuteIncrement: 1,\n    onClose(selectedDates) {\n        // Отримуємо перший елемент масиву обраних дат\n        const selectedDate = selectedDates[0];\n\n        // Перевіряємо, чи обрана дата в майбутньому\n        if (selectedDate > new Date()) {\n            // Записуємо обрану дату в змінну\n            userSelectedDate = selectedDate;\n\n            // Робимо кнопку активною\n            startButton.disabled = false;\n        } else {\n            // Показуємо повідомлення про помилку\n            iziToast.error({\n                title: \"Error\",\n                message: \"Please choose a date in the future\",\n            });\n\n            // Робимо кнопку неактивною\n            startButton.disabled = true;\n        }\n    },\n};\n\n// Ініціалізуємо flatpickr на елементі input\nflatpickr(\"#datetime-picker\", options);\n\n// Написуємо функцію, яка додає нуль перед значенням, якщо воно менше 10\nfunction addLeadingZero(value) {\n    return value.toString().padStart(2, \"0\");\n}\n\n// Функція convertMs() повертає об'єкт з розрахованим часом, що залишився до кінцевої дати. \nfunction convertMs(milliseconds) {\n    const seconds = Math.floor((milliseconds / 1000) % 60);\n    const minutes = Math.floor((milliseconds / (1000 * 60)) % 60);\n    const hours = Math.floor((milliseconds / (1000 * 60 * 60)) % 24);\n    const days = Math.floor(milliseconds / (1000 * 60 * 60 * 24));\n\n    return { days, hours, minutes, seconds };\n}\n\n// Написуємо функцію, яка оновлює інтерфейс таймера\nfunction updateTimer() {\n    // Обчислюємо різницю між обраною і поточною датою в мілісекундах\n    const difference = userSelectedDate - new Date();\n\n    // Перевіряємо, чи різниця більша за нуль\n    if (difference > 0) {\n        // Конвертуємо різницю в дні, години, хвилини і секунди\n        const { days, hours, minutes, seconds } = convertMs(difference);\n\n        // Форматуємо значення з нулями\n        const formattedDays = addLeadingZero(days);\n        const formattedHours = addLeadingZero(hours);\n        const formattedMinutes = addLeadingZero(minutes);\n        const formattedSeconds = addLeadingZero(seconds);\n\n        // Виводимо значення на екран\n        timerElement.textContent = `${formattedDays}:${formattedHours}:${formattedMinutes}:${formattedSeconds}`;\n    } else {\n        // Зупиняємо таймер\n        clearInterval(timerId);\n\n        // Виводимо нулі на екран\n        timerElement.textContent = \"00:00:00:00\";\n    }\n}\n\n// Написуємо функцію, яка запускає таймер\nfunction startTimer() {\n    // Перевіряємо, чи обрана дата в майбутньому\n    if (userSelectedDate > new Date()) {\n        // Оновлюємо таймер один раз\n        updateTimer();\n\n        // Запускаємо таймер з інтервалом в одну секунду\n        timerId = setInterval(updateTimer, 1000);\n\n        // Робимо кнопку і інпут неактивними\n        startButton.disabled = true;\n        document.getElementById(\"datetime-picker\").disabled = true;\n    } else {\n        // Показуємо повідомлення про помилку\n        iziToast.error({\n            title: \"Error\",\n            message: \"Please choose a date in the future\",\n        });\n    }\n}\n\n// Додаємо обробник події на кнопку\nstartButton.addEventListener(\"click\", startTimer);\n\n\n//~==== Вариант Alex ===============================================\n\n// import flatpickr from \"flatpickr\";\n// import \"flatpickr/dist/flatpickr.min.css\";\n// import iziToast from \"izitoast\";\n// import \"izitoast/dist/css/iziToast.min.css\";\n\n// const startBtn = document.querySelector('[data-start]');\n// const fieldsValue = document.querySelectorAll('.field');\n// const daysElement = fieldsValue[0].firstElementChild;\n// const hoursElement = fieldsValue[1].firstElementChild;\n// const minutesElement = fieldsValue[2].firstElementChild;\n// const secondsElement = fieldsValue[3].firstElementChild;\n// let delta = 0;\n// let intervalId;\n// let userSelectedDate;\n// let timerStarted = false;\n// let zerosDisplayed = false;\n// startBtn.disabled = true;\n\n// const options = {\n//     enableTime: true,\n//     time_24hr: true,\n//     defaultDate: new Date(),\n//     minuteIncrement: 1,\n//     onClose(selectedDates) {\n//         userSelectedDate = selectedDates[0].getTime();\n//         delta = userSelectedDate - Date.now();\n\n//         if (delta > 0) {\n//             startBtn.disabled = false;\n//             zerosDisplayed = true;\n\n//             if (timerStarted) {\n//                 startTimer();\n//             }\n\n//             startBtn.addEventListener('click', startTimer);\n//         } else {\n//             startBtn.disabled = true;\n//             iziToast.error({\n//                 message: 'Please choose a date in the future',\n//                 messageColor: '#fff',\n//                 messageSize: '16',\n//                 messageLineHeight: '',\n//                 backgroundColor: '#ef4040',\n//                 icon: 'x',\n//                 position: \"topRight\"\n//             });\n\n//             delta = 0;\n//             if (!timerStarted) {\n//                 daysElement.textContent = '00';\n//                 hoursElement.textContent = '00';\n//                 minutesElement.textContent = '00';\n//                 secondsElement.textContent = '00';\n//                 zerosDisplayed = false;\n//             }\n//         }\n//     },\n// };\n\n// const input = document.querySelector('#datetime-picker');\n// flatpickr(input, options);\n\n// function setDateToField(delta) {\n//     if (zerosDisplayed) {\n//         daysElement.textContent = convertMs(delta).days.toString().padStart(2, '0');\n//         hoursElement.textContent = convertMs(delta).hours.toString().padStart(2, '0');\n//         minutesElement.textContent = convertMs(delta).minutes.toString().padStart(2, '0');\n//         secondsElement.textContent = convertMs(delta).seconds.toString().padStart(2, '0');\n//     }\n// }\n\n// function startTimer() {\n//     if (!timerStarted && zerosDisplayed) {\n//         input.disabled = true;\n//         startBtn.disabled = true;\n//         timerStarted = true;\n\n//         setDateToField(delta);\n\n//         intervalId = setInterval(() => {\n//             delta -= 1000;\n//             setDateToField(delta);\n\n//             if (delta <= 0) {\n//                 stopTimer();\n//             }\n//         }, 1000);\n//     }\n// }\n\n// function stopTimer() {\n//     clearInterval(intervalId);\n//     input.disabled = false;\n//     startBtn.disabled = true;\n//     timerStarted = false;\n//     zerosDisplayed = false;\n//     daysElement.textContent = '00';\n//     hoursElement.textContent = '00';\n//     minutesElement.textContent = '00';\n//     secondsElement.textContent = '00';\n// }\n\n// function convertMs(ms) {\n//     const second = 1000;\n//     const minute = second * 60;\n//     const hour = minute * 60;\n//     const day = hour * 24;\n\n//     const days = Math.floor(ms / day);\n//     const hours = Math.floor((ms % day) / hour);\n//     const minutes = Math.floor(((ms % day) % hour) / minute);\n//     const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n//     return { days, hours, minutes, seconds };\n// }\n\n//~==== Вариант Лиля ===============================================\n\n// import flatpickr from 'flatpickr';\n// import iziToast from 'izitoast';\n\n// import 'flatpickr/dist/flatpickr.min.css';\n// import 'izitoast/dist/css/iziToast.min.css';\n\n// const myButtonEl = document.querySelector('button');\n// const inputEl = document.querySelector('#datetime-picker');\n// const timerEl = document.querySelector('.timer');\n// const daysSpan = timerEl.querySelector('[data-days]');\n// const hoursSpan = timerEl.querySelector('[data-hours]');\n// const minutesSpan = timerEl.querySelector('[data-minutes]');\n// const secondsSpan = timerEl.querySelector('[data-seconds]');\n\n// let userSelectedDate;\n// let countdownInterval;\n// myButtonEl.disabled = true;\n\n// function startCountdown() {\n//     countdownInterval = setInterval(updateCountdown, 1000);\n// }\n\n// function updateCountdown() {\n//     const now = new Date();\n//     const remainingTime = userSelectedDate - now;\n//     if (remainingTime <= 0) {\n//         stopCountdown();\n//         return;\n//     }\n//     const { days, hours, minutes, seconds } = convertMs(remainingTime);\n//     daysSpan.textContent = days;\n//     hoursSpan.textContent = hours;\n//     minutesSpan.textContent = minutes;\n//     secondsSpan.textContent = seconds;\n// }\n\n// myButtonEl.addEventListener('click', () => {\n//     if (userSelectedDate) {\n//         myButtonEl.disabled = true;\n//         inputEl.disabled = true;\n//         startCountdown();\n//     }\n// });\n\n// const options = {\n//     enableTime: true,\n//     time_24hr: true,\n//     dateFormat: 'Y-m-d H:i',\n//     defaultDate: new Date(),\n//     minuteIncrement: 1,\n//     onClose(selectedDates) {\n//         userSelectedDate = selectedDates[0];\n//         if (userSelectedDate < Date.now()) {\n//             iziToast.error({\n//                 position: 'topRight',\n//                 message: 'Please choose a date in the future',\n//             });\n//             myButtonEl.disabled = true;\n//         } else {\n//             myButtonEl.disabled = false;\n//         }\n//     },\n// };\n\n// function stopCountdown() {\n//     clearInterval(countdownInterval);\n//     daysSpan.textContent = '00';\n//     hoursSpan.textContent = '00';\n//     minutesSpan.textContent = '00';\n//     secondsSpan.textContent = '00';\n//     countdownInterval = null;\n//     inputEl.disabled = false;\n// }\n\n// const instance = flatpickr(inputEl, options);\n\n// function convertMs(ms) {\n//     // Number of milliseconds per unit of time\n//     const second = 1000;\n//     const minute = second * 60;\n//     const hour = minute * 60;\n//     const day = hour * 24;\n\n//     // Remaining days\n//     const days = Math.floor(ms / day)\n//         .toString()\n//         .padStart(2, '0');\n//     // Remaining hours\n//     const hours = Math.floor((ms % day) / hour)\n//         .toString()\n//         .padStart(2, '0');\n//     // Remaining minutes\n//     const minutes = Math.floor(((ms % day) % hour) / minute)\n//         .toString()\n//         .padStart(2, '0');\n//     // Remaining seconds\n//     const seconds = Math.floor((((ms % day) % hour) % minute) / second)\n//         .toString()\n//         .padStart(2, '0');\n\n//     return { days, hours, minutes, seconds };\n// }\n\n// console.log(convertMs(2000)); // {days: 0, hours: 0, minutes: 0, seconds: 2}\n// console.log(convertMs(140000)); // {days: 0, hours: 0, minutes: 2, seconds: 20}\n// console.log(convertMs(24140000)); // {days: 0, hours: 6 minutes: 42, seconds: 20}\n"],"names":["userSelectedDate","timerId","timerElement","startButton","options","selectedDates","selectedDate","iziToast","flatpickr","addLeadingZero","value","convertMs","milliseconds","seconds","minutes","hours","updateTimer","difference","days","formattedDays","formattedHours","formattedMinutes","formattedSeconds","startTimer"],"mappings":"gJAoHA,IAAIA,EAGAC,EAGJ,MAAMC,EAAe,SAAS,cAAc,QAAQ,EAG9CC,EAAc,SAAS,cAAc,cAAc,EAEzDA,EAAY,SAAW,GAGvB,MAAMC,EAAU,CACZ,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAEnB,MAAMC,EAAeD,EAAc,CAAC,EAGhCC,EAAe,IAAI,MAEnBN,EAAmBM,EAGnBH,EAAY,SAAW,KAGvBI,EAAS,MAAM,CACX,MAAO,QACP,QAAS,oCACzB,CAAa,EAGDJ,EAAY,SAAW,GAE9B,CACL,EAGAK,EAAU,mBAAoBJ,CAAO,EAGrC,SAASK,EAAeC,EAAO,CAC3B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CAC3C,CAGA,SAASC,EAAUC,EAAc,CAC7B,MAAMC,EAAU,KAAK,MAAOD,EAAe,IAAQ,EAAE,EAC/CE,EAAU,KAAK,MAAOF,GAAgB,IAAO,IAAO,EAAE,EACtDG,EAAQ,KAAK,MAAOH,GAAgB,IAAO,GAAK,IAAO,EAAE,EAG/D,MAAO,CAAE,KAFI,KAAK,MAAMA,GAAgB,IAAO,GAAK,GAAK,GAAG,EAE7C,MAAAG,EAAO,QAAAD,EAAS,QAAAD,CAAO,CAC1C,CAGA,SAASG,GAAc,CAEnB,MAAMC,EAAajB,EAAmB,IAAI,KAG1C,GAAIiB,EAAa,EAAG,CAEhB,KAAM,CAAE,KAAAC,EAAM,MAAAH,EAAO,QAAAD,EAAS,QAAAD,GAAYF,EAAUM,CAAU,EAGxDE,EAAgBV,EAAeS,CAAI,EACnCE,EAAiBX,EAAeM,CAAK,EACrCM,EAAmBZ,EAAeK,CAAO,EACzCQ,EAAmBb,EAAeI,CAAO,EAG/CX,EAAa,YAAc,GAAGiB,CAAa,IAAIC,CAAc,IAAIC,CAAgB,IAAIC,CAAgB,EAC7G,MAEQ,cAAcrB,CAAO,EAGrBC,EAAa,YAAc,aAEnC,CAGA,SAASqB,GAAa,CAEdvB,EAAmB,IAAI,MAEvBgB,IAGAf,EAAU,YAAYe,EAAa,GAAI,EAGvCb,EAAY,SAAW,GACvB,SAAS,eAAe,iBAAiB,EAAE,SAAW,IAGtDI,EAAS,MAAM,CACX,MAAO,QACP,QAAS,oCACrB,CAAS,CAET,CAGAJ,EAAY,iBAAiB,QAASoB,CAAU"}